{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/greet.ts","src/main.ts"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","sayHello","name","divName","greet_1","WIDTH","document","getElementById","innerText","Energy","row","col","this","energy","data","width","array","Uint8ClampedArray","height","color","max","ImageData","val","get","clamp","range","_classCallCheck","min","Uint16Array","setEnergy","ImageArray","start","getOffset","rgb","RangeError","img","Image","src","onload","context","getContext","canvas","drawImage","imageArray","getImageData","context2","putImageData","asImageData"],"mappings":"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","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","export function sayHello(name: string) {\n    return `Hello from ${name}.`;\n}\n","import { sayHello } from './greet';\n\nconst WIDTH = 600;\n\nfunction showHello(divName: string, name: string) {\n    const elt = document.getElementById(divName);\n    elt.innerText = sayHello(name);\n}\n\nshowHello('greeting', 'TypeScript');\n\nclass Energy {\n    private readonly energy: Uint16Array;\n    private min: number = 0;\n    private max: number = 0;\n\n    constructor(private readonly data: ImageArray) {\n        this.energy = new Uint16Array(data.width * data.height);\n        for (let row = 0; row < this.data.height; row++) {\n            for (let col = 0; col < this.data.width; col++) {\n                this.setEnergy(row, col, 255);\n                /*\n                const leftRgb = this.getClamped(row, col - 1);\n                const rightRgb = this.getClamped(row, col + 1);\n                let horizontal = 0;\n                for (let i = 0; i < leftRgb.length; i++) {\n                    horizontal += (leftRgb[i] - rightRgb[i]) ** 2;\n                }\n\n                const upRgb = this.getClamped(row - 1, col);\n                const downRgb = this.getClamped(row + 1, col);\n                let vertical = 0;\n                for (let i = 0; i < upRgb.length; i++) {\n                    vertical += (upRgb[i] - downRgb[i]) ** 2;\n                }\n\n                const energy = horizontal + vertical;\n                this.min = Math.min(this.min, energy);\n                this.max = Math.max(this.max, energy);\n                this.setEnergy(row, col, energy);\n                */\n            }\n        }\n\n    }\n\n    public get(row: number, col: number): number {\n        return this.energy[row * this.data.width + col];\n    }\n\n    public asImageData(): ImageData {\n        let array = new Uint8ClampedArray(this.data.width * this.data.height * 4);\n        for (let i = 0; i < this.energy.length; i++) {\n            const color = this.energy[i] / this.max * 255;\n            array[i * 4] = color;\n            array[i * 4 + 1] = color;\n            array[i * 4 + 2] = 0;\n            array[i * 4 + 3] = 255; // alpha\n\n        }\n        return new ImageData(array, this.data.width, this.data.height);\n    } \n\n    private setEnergy(row: number, col: number, val: number) {\n        this.energy[row * this.data.width + col] = val;\n    }\n\n    private getClamped(row: number, col: number): [number, number, number] {\n        return this.data.get(\n            this.clamp(row, [0, this.data.height - 1]),\n            this.clamp(col, [0, this.data.width - 1]));\n    }\n\n    private clamp(val: number, range: [number, number]): number {\n        if (val < range[0]) {\n            return range[0];\n        }\n        if (val >= range[1]) {\n            return range[1];\n        }\n        return val;\n    }\n}\n\nclass ImageArray {\n    constructor(\n        private data: Uint8ClampedArray, \n        public readonly width: number,\n        public readonly height: number) {}\n\n    public get(row: number, col: number): [\n        number, number, number] {\n        let start = this.getOffset(row, col);\n        return [this.data[start], this.data[start + 1], this.data[start + 2]];\n    }\n\n    public set(row: number, col: number, rgb: [number, number, number]): void {\n        let start = this.getOffset(row, col);\n        for (let i = 0; i < rgb.length; i++) {\n            this.data[start + i] = rgb[i];\n        }\n    }\n\n    public getImageData(): ImageData {\n        return new ImageData(this.data, this.width, this.height);\n    }\n\n    private getOffset(row: number, col: number): number {\n        if (row < 0 || row >= this.height || col < 0 || col >= this.width) {\n            throw new RangeError(\n                `row (${row}) and col (${col}) must be in ranges ` +\n                `[0, ${this.height}) and [0, ${this.width}), respectively.`);\n        } \n        return row * this.width * 4 + col;\n    }\n}\n\n\nconst img = new Image();\nimg.src = \"broadway-tower.jpg\";\nimg.onload = function() {\n    const canvas : HTMLCanvasElement = document.getElementById(\"original\") as HTMLCanvasElement;\n    const context = canvas.getContext(\"2d\");\n    context.canvas.height = img.height * (WIDTH / img.width);\n    context.canvas.width = WIDTH;\n\n    context.drawImage(img, 0, 0, context.canvas.width, context.canvas.height);\n    let imageArray = new ImageArray(\n        context.getImageData(0, 0, context.canvas.width, context.canvas.height).data,\n        context.canvas.width,\n        context.canvas.height\n    )\n\n    let energy = new Energy(imageArray);\n\n    const canvas2 = document.getElementById(\"modified\") as HTMLCanvasElement;\n    const context2 = canvas2.getContext(\"2d\");\n    context2.canvas.height = img.height * (WIDTH / img.width);\n    context2.canvas.width = WIDTH;\n\n    /*\n    for (let i = 0; i < imageArray.height; i++) {\n        imageArray.set(i, 100, [0, 0, 0]);\n    }*/\n    context2.putImageData(energy.asImageData(), 0, 0);\n};\n\n\n\n"]}